# Functions that simplify working with the AWS CLI tool -*- shell-script -*-
#
# Copyright (c) 2016 Acquia
# See the LICENSE file shipped with the source code.

#######################################
# Outputs all arguments to STDERR, prefixed with the date.
# Globals:
#   None
# Arguments:
#   (optional) N number of arguments, all sent to STDERR
# Returns:
#   Outputs arguments to STDERR
#######################################
err () {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

#######################################
# Helper function that outputs the passed argument to STDERR and exits. If the
# last argument is an integer, then it is returned as the status code by the
# script and is not printed to STDERR.
# Globals:
#   None
# Arguments:
#   (optional) The first N arguments are printed to STDERR, if the last argument
#   is an integer then it is the status code returned by this script.
# Returns:
#   Outputs the message to STDERR and returns a non-zero status code.
#######################################
exit_err () {
  status_code=${@:$#}
  if [ "$status_code" -eq "$status_code" ] 2> /dev/null; then
    err $(echo "$@" | sed -e "s/[ \t]*$status_code$//")
    exit $status_code
  else
    err $@
    exit 1
  fi
}

#######################################
# Helper function that ensures required arguments were passed to the function.
# Globals:
#   None
# Arguments:
#   - Argument being checked
#   - (optional) Error message, default: "function missing required argument"
#   - (optional) Status code returned when the script exits.
# Returns:
#   Outputs the message to STDERR and returns a non-zero status code.
#######################################
check_arg () {
  if [ -z "$1" ]; then
    if [ -n "$2" ]; then
      exit_err "$2" $3
    else
      exit_err "function missing required argument" $3
    fi
  fi
}

#######################################
# Outputs a filter formatted for the --filters option. This function requires
# the filter name and values to be passed as arguments.
# Globals:
#   None
# Arguments:
#   - Filter name e.g. "instance-state-name"
#   - Filter value(s) e.g. "running"
# Returns:
#   Outputs the filter
#######################################
filter () {
  check_arg "$1" "argument 1 required for filter: name"
  check_arg "$2" "argument 2 required for filter: values"
  echo "Name=$1,Values=\"$2\""
}

#######################################
# Outputs a tag filter formatted for the --filters option. This function
# requires the key name tag value to be passed as arguments.
# Globals:
#   None
# Arguments:
#   - Tag key e.g. "aws:cloudformation:stack-name"
#   - Tag value e.g. "my-stack"
# Returns:
#   Outputs the filter
#######################################
tag_filter () {
  check_arg "$1" "argument 1 required for tag_filter: tag-key"
  check_arg "$2" "argument 2 required for tag_filter: tag-value"
  echo "Name=tag-key,Values=\"$1\" Name=tag-value,Values=\"$2\""
}

#######################################
# Outputs a filter for resources in a stack that are associated with a logical
# resource ID.
# Globals:
#   None
# Arguments:
#   - Stack name
#   - Resource's logical ID
# Returns:
#   Outputs the filter
#######################################
logical_id_filter () {
  check_arg "$1" "argument 1 required for logical_id_filter: stack-name"
  check_arg "$2" "argument 2 required for logical_id_filter: logical-id"
  echo "$(tag_filter aws:cloudformation:stack-name $1) $(tag_filter aws:cloudformation:logical-id $2)"
}

#######################################
# Outputs a filter for running EC2 instances in a stack that are associated with
# a logical resource ID. In addition the the logical_id_filter filters, this
# function adds a filter that ensures the instances are running.
# Globals:
#   None
# Arguments:
#   - Stack name
#   - Resource's logical ID
# Returns:
#   Outputs the filter
#######################################
logical_id_ec2_filter () {
  check_arg "$1" "argument 1 required for logical_id_ec2_filter: stack-name"
  check_arg "$2" "argument 2 required for logical_id_ec2_filter: logical-id"
  echo "$(filter instance-state-name running) $(logical_id_filter $1 $2)"
}

#######################################
# Outputs the resources unique identifier given the stack name and the logical
# ID of the resource
# Globals:
#   None
# Arguments:
#   - Stack name
#   - Resource's logical ID
# Returns:
#   The resources unique identifier.
#######################################
resource_id_from_logical_id () {
  check_arg "$1" "argument 1 required for ips_from_logical_id: stack-name"
  check_arg "$2" "argument 2 required for ips_from_logical_id: logical-id"
  aws cloudformation describe-stack-resources --stack-name "$1" --logical-resource-id "$2" --query "StackResources[*].PhysicalResourceId" --output text
  return $?
}

#######################################
# Invokes a metadata endpoint.
# Globals:
#   None
# Arguments:
#   - the path after "http://169.254.169.254/latest/meta-data/"
#     e.g. "instance-id", "placement/availability-zone"
# Returns:
#   Outputs the metadata
#######################################
metadata () {
  check_arg "$1" "argument 1 required for metadata: sub-path"
  curl -f -s "http://169.254.169.254/latest/meta-data/$1"
  return $?
}

#######################################
# Outputs the public IP addresses of EC2 instances given the stack name and
# logical ID parameters passed to this function in that order.
# Globals:
#   None
# Arguments:
#   - Stack name
#   - Resource's logical ID
# Returns:
#   The public IP addresses
#######################################
ips_from_logical_id () {
  check_arg "$1" "argument 1 required for ips_from_logical_id: stack-name"
  check_arg "$2" "argument 2 required for ips_from_logical_id: logical-id"
  aws ec2 describe-instances --filters $(logical_id_ec2_filter "$1" "$2") --query "Reservations[*].Instances[*].PublicIpAddress" --output text
  return $?
}

#######################################
# Outputs the AMIs that EC2 instances were launched from given the stack name
# and logical ID parameters passed to this function in that order.
# Globals:
#   None
# Arguments:
#   - Stack name
#   - Resource's logical ID
# Returns:
#   Outputs the filter
#######################################
amis_from_logical_id () {
  check_arg "$1" "argument 1 required for amis_from_logical_id: stack-name"
  check_arg "$2" "argument 2 required for amis_from_logical_id: logical-id"
  aws ec2 describe-instances --filters $(logical_id_ec2_filter "$1" "$2") --query "Reservations[*].Instances[*].ImageId" --output text | sort -u
  return $?
}

#######################################
# Outputs the value of a parameter in a CloudFormation stack.
# Globals:
#   None
# Arguments:
#   - Stack name name
#   - Parameter
# Returns:
#   Outputs the parameter's value
#######################################
cfn_parameter () {
  check_arg "$1" "argument 1 required for cfn_parameter: stack-name"
  check_arg "$2" "argument 2 required for cfn_parameter: parameter-name"
  aws cloudformation describe-stacks --stack-name "$1" --query "Stacks[*].Parameters[?ParameterKey == '$2'].ParameterValue" --output=text
  return $?
}

#######################################
# Outputs the host for a given an RDS instance.
# Globals:
#   None
# Arguments:
#   - Instance ID
# Returns:
#   Outputs the RDS instance's host
#######################################
rds_host_from_instance_id() {
  check_arg "$1" "argument 1 required for rds_host_from_instance_id: instance-id"
  aws rds describe-db-instances --db-instance-identifier "$1" --query "DBInstances[*].Endpoint.Address" --output text
  return $?
}

#######################################
# Outputs the port for a given an RDS instance.
# Globals:
#   None
# Arguments:
#   - Instance ID
# Returns:
#   Outputs the RDS instance's port
#######################################
rds_port_from_instance_id() {
  check_arg "$1" "argument 1 required for rds_host_from_instance_id: instance-id"
  aws rds describe-db-instances --db-instance-identifier "$1" --query "DBInstances[*].Endpoint.Port" --output text
  return $?
}

#######################################
# Deletes a record for a given value.
# Globals:
#   None
# Arguments:
#   - Record Name
#   - Value
#   - Hosted Zone Id
#   - Record Type
#   - TTL
# Returns:
#   Outputs the status and and submission time of the request.
#######################################
create_route53_record() {
  check_arg "$1" "argument 1 required for create_route53_record: Record Name"
  check_arg "$2" "argument 2 required for create_route53_record: Value"
  check_arg "$3" "argument 3 required for create_route53_record: Hosted Zone Id"
  check_arg "$4" "argument 4 required for create_route53_record: Record Type"
  check_arg "$5" "argument 5 required for create_route53_record: TTL"

  aws route53 change-resource-record-sets --cli-input-json "{\"HostedZoneId\" : \"$3\",\"ChangeBatch\":{\"Comment\": \"Creating new record.\", \"Changes\": [{\"Action\": \"CREATE\",\"ResourceRecordSet\": {\"Name\": \"$1\",\"Type\": \"$4\",\"TTL\": $5,\"ResourceRecords\": [{\"Value\": \"$2\"}] }}] }}"

  return $?
}

#######################################
# Deletes a record for a given value.
# Globals:
#   None
# Arguments:
#   - Record Name
#   - Value
#   - Hosted Zone Id
#   - Record Type
#   - TTL
# Returns:
#   Outputs the status and and submission time of the request.
#######################################
delete_route53_record() {
  check_arg "$1" "argument 1 required for create_route53_record: Record Name"
  check_arg "$2" "argument 2 required for create_route53_record: Value"
  check_arg "$3" "argument 3 required for create_route53_record: Hosted Zone Id"
  check_arg "$4" "argument 4 required for create_route53_record: Record Type"
  check_arg "$5" "argument 5 required for create_route53_record: TTL"

  aws route53 change-resource-record-sets --cli-input-json "{\"HostedZoneId\" : \"$3\",\"ChangeBatch\":{\"Comment\": \"Creating new record.\", \"Changes\": [{\"Action\": \"DELETE\",\"ResourceRecordSet\": {\"Name\": \"$1\",\"Type\": \"$4\",\"TTL\": $5,\"ResourceRecords\": [{\"Value\": \"$2\"}] }}] }}"

  return $?
}

poll_get_ec2_command_invocation() {
  commandDescriptionJSON=$(aws ssm get-command-invocation --instance-id "$1" --command-id "$2")
  commandStatus=$(echo "$commandDescriptionJSON" | python3 -c "import sys, json; print(json.load(sys.stdin)['Status'])")
  if [[ $commandStatus == "InProgress" ]];
  then
    echo "..."
    sleep 0.5
    pollGetCommandInvocation "$1" "$2"
  else
    echo "$commandDescriptionJSON" | python3 -c "import sys, json; print(json.load(sys.stdin)['StandardOutputContent'])"
    echo "$commandDescriptionJSON" | python3 -c "import sys, json; print(json.load(sys.stdin)['StandardErrorContent'])"
  fi
}

async_run_shell_command_EC2() {
  # Only supports single-line shell commands. If you need multiple "lines", use semi-colon to separate statements
  aws ssm send-command --document-name "AWS-RunShellScript" --instance-ids "$1" --parameters "{\"commands\":[\"$2\"],\"executionTimeout\":[\"3600\"]}" --comment "${2:0:30}" --timeout-seconds 600 --region ca-central-1 | python3 -c "import sys, json; print(json.load(sys.stdin)['Command']['CommandId'])"
}

run_shell_command_EC2() {
  commandId=$(async_run_shell_command_EC2 "$1")
  pollGetCommandInvocation "$1" "$commandId"
}

# Validate that the aws tool is present.
if [ -z $(which aws) ]; then
  exit_err "Unable to locate 'aws', ensure it is installed and in the PATH."
fi
